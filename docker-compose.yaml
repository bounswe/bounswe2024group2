services:
  mysql-db:
    image: mysql:latest
    container_name: mysql-db
    restart: always
    volumes:
      -  my-db:/var/lib/mysql
    environment:
      MYSQL_DATABASE: 'db'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      - '3306:3306'
    expose:
      - '3306'
    networks:
      - backend_network
    healthcheck:
      test: ['CMD', 'mysql-db', '-h', '$MYSQL_HOST', '-u', '$MYSQL_USER', '-p$MYSQL_PASSWORD', '-e', 'SELECT 1']
      timeout: 20s
      retries: 10

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    command: >
      sh -c 'python3 manage.py makemigrations &&
             python3 manage.py migrate --noinput &&
             python3 manage.py collectstatic --noinput &&
             python3 manage.py update_currencies && 
             python3 manage.py update_stocks && 
             gunicorn backend.wsgi:application --bind 0.0.0.0:8000'
    restart: always
    environment:
      MYSQL_HOST: 'mysql-db'
      MYSQL_DATABASE: 'db'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      SECRET_KEY: 'django-insecure-wuc2#&nmhoqp7266)y639mfopdfwxzzx4jlux-f$k0c(+dhju*'
      EMAIL_BACKEND: 'django.core.mail.backends.smtp.EmailBackend' 
      EMAIL_USE_TLS: 'false'
      EMAIL_HOST: 'mailhog'  
      EMAIL_PORT: '1025'      
      EMAIL_HOST_USER: 'test'  
      EMAIL_HOST_PASSWORD: 'test'
    volumes:
      - ./backend:/backend
    ports:
      - '8000:8000'
    depends_on:
      - mysql-db
    networks:
      - backend_network

  frontend:
    image: frontend
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: always
    environment:
      REACT_APP_API_BASE_URL: 'http://0.0.0.0:8000'
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - backend_network

  mailhog:
      image: mailhog/mailhog
      ports:
        - 1025:1025  
        - 8025:8025  
      restart: unless-stopped
      networks:
        - backend_network
networks:
  backend_network:
    driver: bridge

volumes:
  my-db:
  backend: